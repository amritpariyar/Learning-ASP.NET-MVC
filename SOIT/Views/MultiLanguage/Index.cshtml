
@{
    ViewBag.Title = "Index";
}


<div class="panel panel-default">
    <div class="panel-heading">
        <div class="panel-title">
            Multi Keyboard Type
            <div class="pull-right">
                <input type="radio" id="traditional" name="typeOption" value="traditional" checked="checked" />
                <label for="traditional">Traditional</label>
                <input type="radio" id="roman" name="typeOption" value="roman" />
                <label for="roman">Roman</label>
            </div>
        </div>

    </div>
    <div class="panel-body">
        <div class="form-group">
            <label for="FatherNameEn">Father Name</label>
            <input type="text" id="FatherName" name="FatherNameEn" class="fathername en" />
            <input type="text" id="FatherNameNp" name="FatherNameNp" class="fathername np" />
        </div>
        <div class="form-group">
            <label for="MotherNameEn">Mother Name</label>
            <input type="text" id="MotherNameEn" name="MotherNameEn" class="mothername en" />
            <input type="text" id="MotherNameNp" name="MotherNameNp" class="mothername np" />
        </div>
    </div>
</div>
@section scripts{
    <script src="~/Scripts/npDef.js"></script>
    <script src="~/Scripts/npChar.js"></script>
    
    <script language="javascript">
        var newSession = true;
        var isCurlyOn = false;
        var isSquareOn = false;

        function convertMe(data, npElement) {
            if ((data.length > 60 && data.charCodeAt(data.length - 1) == 32)) {
                moveUp();
                return;
            }
            var paddedAD = data;
            if (data.indexOf("[") >= 0 && data.indexOf("]", data.indexOf("[")) > 0); else if (data.indexOf("[") >= 0 && data.indexOf("]", data.indexOf("[")) < 0) {
                paddedAD = paddedAD + "]";
            } else if (data.indexOf("]") >= 0) {
                paddedAD = "[" + paddedAD;
            } else if (isSquareOn) {
                paddedAD = "[" + paddedAD + "]";
            }

            $('#' + npElement).val(fts(paddedAD, eval(false), true));
        }


    </script>
    <script>
        var enableinput = function () {
            var n = $('.np');
            n.each((i, v) => { var id = $(v).attr('id'); $a.enable(id); });
        }
        var disableinput = function () {
            var n = $('.np');
            n.each((i, v) => { var id = $(v).attr('id'); $a.disable(id); });
        }
        var toogleKeyboard = function () {
            var checkedKeyboard = $('input[name=typeOption]:checked').val();
            if (checkedKeyboard == 'roman') {
                enableinput();
            } else {
                disableinput();
            }
        }
        $(document).ready(function () {
            toogleKeyboard();
        })
        $('input[name=typeOption]').on('change', function () {
            toogleKeyboard();
        })
        $(".np").on('keyup blur', function () {
            var checkedKeyboard = $('input[name=typeOption]:checked').val();
            if (checkedKeyboard == "traditional") {
                var string = $(this).val();
                console.log(string);
                var converted = _(string);
                $(this).val(converted);
            }
        });
        $('.en').on('keyup keydown', function () {
            var el_char = $(this).val();
            var el_id = $(this)[0].id;
            var npElement = el_id + 'Np';
            var convertNp = convertMe(el_char, npElement);
        })
    </script>
}